import asyncio
import json
from airtable import Airtable
from typing import Dict, List, Optional

class AirtableMCPServer:
    def __init__(self, api_key: str, base_id: str, table_name: str):
        self.airtable = Airtable(base_id, table_name, api_key)
        
    async def get_pending_titles(self, limit: int = 1) -> Optional[Dict]:
        """Get titles with 'Pending' status from Airtable"""
        try:
            # Filter for records with Status = 'Pending'
            records = self.airtable.search('Status', 'Pending', max_records=limit)
            
            if records:
                record = records[0]
                return {
                    'record_id': record['id'],
                    'title': record['fields'].get('Title', ''),
                    'product_category': record['fields'].get('Category', ''),
                    'target_keywords': record['fields'].get('Keywords', ''),
                    'status': record['fields'].get('Status', '')
                }
            return None
            
        except Exception as e:
            print(f"Error fetching pending titles: {e}")
            return None
    
    async def update_record_status(self, record_id: str, status: str = "Done") -> bool:
        """Update record status to prevent duplicates"""
        try:
            self.airtable.update(record_id, {'Status': status})
            print(f"✅ Updated record {record_id} status to {status}")
            return True
            
        except Exception as e:
            print(f"Error updating record status: {e}")
            return False
    
    async def save_generated_content(self, record_id: str, content_data: Dict) -> bool:
        """Save generated content back to Airtable"""
        try:
            update_fields = {}
            
            if 'keywords' in content_data:
                update_fields['Generated_Keywords'] = ', '.join(content_data['keywords'])
            
            if 'optimized_title' in content_data:
                update_fields['Optimized_Title'] = content_data['optimized_title']
                
            if 'script' in content_data:
                update_fields['Generated_Script'] = content_data['script']
                
            if 'video_url' in content_data:
                update_fields['Video_URL'] = content_data['video_url']
                
            if 'blog_post' in content_data:
                update_fields['Blog_Post'] = content_data['blog_post']
            
            self.airtable.update(record_id, update_fields)
            print(f"✅ Saved generated content for record {record_id}")
            return True
            
        except Exception as e:
            print(f"Error saving generated content: {e}")
            return False

# Test the server
async def test_airtable_server():
    # Load config
    with open('/app/config/api_keys.json', 'r') as f:
        config = json.load(f)
    
    # Initialize server
    server = AirtableMCPServer(
        api_key=config['airtable_api_key'],
        base_id=config['airtable_base_id'],
        table_name=config['airtable_table_name']
    )
    
    # Test getting pending titles
    pending_title = await server.get_pending_titles()
    if pending_title:
        print("✅ Found pending title:", pending_title['title'])
    else:
        print("❌ No pending titles found")

if __name__ == "__main__":
    asyncio.run(test_airtable_server())
